---
## The following CFn stack must be created first in order to be referenced by the ImportValue function.
## 1. ${SystemName}-elb
## 2. ${SystemName}-s3
## 3. ${SystemName}-route53
AWSTemplateFormatVersion: "2010-09-09"
Description: Create CloudFront Distribution etc.

Parameters:
  SystemName:
    Description: System Name
    Type: String
    Default: example
  CertificateID:
    Description: SSL Certificate ID for CloudFront. Require SSL Certificate in N.Verginia Region.
    Type: String
    Default: 11112222-3333-4444-5555-aaaabbbbcccc
  WebACLArn:
    Description: Web ACL ARN to attach to CloudFront. Require Wab ACL in N.Verginia Region.
    Type: String
    Default: arn:aws:wafv2:us-east-1:111122223333:global/webacl/webacl-name/11112222-3333-4444-5555-aaaabbbbcccc
  SubDomain:
    Description: Sub Domain of origin.
    Type: String
    Default: origin
    AllowedPattern: ^[^.]*$
  MaintenancePagePrefix:
    Description: S3 bucket Prefix to put maintenance page.
    Type: String
    Default: maintenance
  MaintenancePageObjectName:
    Description: Object name of maintenance page.
    Type: String
    Default: sorry.html
  ContentsOriginPrefix:
    Description: S3 bucket Prefix to put static contents.
    Type: String
    Default: contents

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Parameters:
          - SystemName
          - SubDomain
          - ContentsOriginPrefix
          - MaintenancePagePrefix
          - MaintenancePageObjectName
          - CertificateID
          - WebACLArn

Resources:
  ## CloudFront: Origin Access Control
  s3contentsOAC: 
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub ${SystemName}-cloudfront-s3contentsOAC
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  ## CloudFront: Distribution
  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties: 
      DistributionConfig:
        Aliases: 
          - Fn::ImportValue: !Sub ${SystemName}-route53-HostedZoneDomainName
        Enabled: True
        HttpVersion: http1.1
        PriceClass: PriceClass_200
        ViewerCertificate:
          AcmCertificateArn: !Sub arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/${CertificateID}
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        Origins: 
          - CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
            DomainName: !Sub 
              - "${SubDomain}.${DomainName}"
              - DomainName: 
                  Fn::ImportValue: !Sub ${SystemName}-route53-HostedZoneDomainName
            Id: 
              Fn::ImportValue: !Sub ${SystemName}-elb-ELB
          - S3OriginConfig:
              OriginAccessIdentity: ''
            DomainName: 
              Fn::ImportValue: !Sub ${SystemName}-s3-S3bucketDomainName
            OriginAccessControlId: !Ref s3contentsOAC
            Id: 
              Fn::ImportValue: !Sub ${SystemName}-s3-S3bucketArn
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          CachedMethods:
            - GET
            - HEAD
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          TargetOriginId: 
            Fn::ImportValue: !Sub ${SystemName}-elb-ELB
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
        CacheBehaviors:
          - AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            PathPattern: !Sub /${ContentsOriginPrefix}/*
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
            TargetOriginId:
              Fn::ImportValue: !Sub ${SystemName}-s3-S3bucketArn
            ViewerProtocolPolicy: redirect-to-https
          - AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            PathPattern: !Sub /${MaintenancePagePrefix}/*
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
            TargetOriginId:
              Fn::ImportValue: !Sub ${SystemName}-s3-S3bucketArn
            ViewerProtocolPolicy: redirect-to-https
        CustomErrorResponses: 
          - ErrorCode: 500
            ResponseCode: 200
            ResponsePagePath: !Sub /${MaintenancePagePrefix}/${MaintenancePageObjectName}
          - ErrorCode: 503
            ResponseCode: 200
            ResponsePagePath: !Sub /${MaintenancePagePrefix}/${MaintenancePageObjectName}
          - ErrorCode: 504
            ResponseCode: 200
            ResponsePagePath: !Sub /${MaintenancePagePrefix}/${MaintenancePageObjectName}
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: !Sub /${MaintenancePagePrefix}/${MaintenancePageObjectName}
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: !Sub /${MaintenancePagePrefix}/${MaintenancePageObjectName}
        WebACLId: !Sub ${WebACLArn}
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-CloudFront-distribution

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket:
        Fn::ImportValue: !Sub ${SystemName}-s3-S3bucket
      PolicyDocument: 
        Version: "2008-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service:
                - cloudfront.amazonaws.com
            Action:
              - s3:GetObject
            Resource:
              - !Sub 
                - '${S3bucketArn}/*'
                - S3bucketArn: {'Fn::ImportValue': !Sub '${SystemName}-s3-S3bucketArn'}
            Condition: 
              StringEquals:
                AWS:SourceArn: 
                  - !Join 
                    - ''
                    - - !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/'
                      - !Ref Distribution

  ## Route 53: Record Set (A:CloudFront)
  RecordSetACloudFront:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: 
        Fn::ImportValue: !Sub ${SystemName}-route53-HostedZone
      Name: 
        Fn::ImportValue: !Sub ${SystemName}-route53-HostedZoneDomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt Distribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

Outputs:
  ## CloudFront: Origin Access Control
  s3contentsOAC:
    Value: !Ref s3contentsOAC
    Export:
      Name: !Sub ${AWS::StackName}-s3contentsOAC

  ## CloudFront: Distribution
  Distribution:
    Value: !Ref Distribution
    Export:
      Name: !Sub ${AWS::StackName}-Distribution

  DistributionDomainName:
    Value: !GetAtt Distribution.DomainName
    Export:
      Name: !Sub ${AWS::StackName}-DistributionDomainName
