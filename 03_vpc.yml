---
AWSTemplateFormatVersion: "2010-09-09"
Description: Create VPC etc.

Parameters:
  SystemName:
    Description: System Name
    Type: String
    Default: example
  CidrBits:
    Description: Subnet bits for the CIDR. For example, specifying a value "8" for this parameter will create a CIDR with a mask of "/24".
    Type: Number
    Default: 8
    MinValue: 4
    MaxValue: 16

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Parameters:
          - SystemName
          - CidrBits

Resources:
  ## EC2(VPC): VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/19
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-vpc

  ## EC2(VPC): Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-igw

  ## EC2(VPC): VPC Gateway Attachment
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  ## EC2(VPC): Route Table (Public)
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-public-rtb

  ## EC2(VPC): Route (Public) (Default)
  RoutePublicDefault:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  ## EC2(VPC): Subnet (Public-A)
  SubnetPublicA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Sub ${AWS::Region}a
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-public-subnet-a

  ## EC2(VPC): Subnet (Public-A) Route Table (Public) Association
  SubnetRouteTableAssociationPublicA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicA
      RouteTableId: !Ref RouteTablePublic

  ## EC2(VPC): Subnet (Public-C)
  SubnetPublicC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Sub ${AWS::Region}c
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-public-subnet-c

  ## EC2(VPC): Subnet (Public-C) Route Table (Public) Association
  SubnetRouteTableAssociationPublicC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicC
      RouteTableId: !Ref RouteTablePublic

  ## EC2(VPC): EIP
  EIPNATGatewayA:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-nat-a

  ## EC2(VPC): EIP
  EIPNATGatewayC:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-nat-c

  ## EC2(VPC): NAT Gateway @ Public-A
  NATGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPNATGatewayA.AllocationId
      SubnetId: !Ref SubnetPublicA
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-nat-a

  ## EC2(VPC): NAT Gateway @ Public-C
  NATGatewayC:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPNATGatewayC.AllocationId
      SubnetId: !Ref SubnetPublicC
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-nat-c

  ## EC2(VPC): Route Table (Protected-A)
  RouteTableProtectedA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-protected-rtb-a

  ## EC2(VPC): Route (Protected-A) (Default)
  RouteProtectedADefault:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableProtectedA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayA

  ## EC2(VPC): Route Table (Protected-C)
  RouteTableProtectedC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-protected-rtb-c

  ## EC2(VPC): Route (Protected-C) (Default)
  RouteProtectedCDefault:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableProtectedC
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayC

  ## EC2(VPC): Subnet (Protected-A)
  SubnetProtectedA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Sub ${AWS::Region}a
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-protected-subnet-a

  ## EC2(VPC): Subnet (Protected-A) Route Table (Protected-A) Association
  SubnetRouteTableAssociationProtectedA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetProtectedA
      RouteTableId: !Ref RouteTableProtectedA

  ## EC2(VPC): Subnet (Protected-C)
  SubnetProtectedC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Sub ${AWS::Region}c
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-protected-subnet-c

  ## EC2(VPC): Subnet (Protected-C) Route Table (Protected-C) Association
  SubnetRouteTableAssociationProtectedC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetProtectedC
      RouteTableId: !Ref RouteTableProtectedC

  ## EC2(VPC): Route Table (Private)
  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-private-rtb

  ## EC2(VPC): Subnet (Private-A)
  SubnetPrivateA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.6.0/24
      AvailabilityZone: !Sub ${AWS::Region}a
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-private-subnet-a

  ## EC2(VPC): Subnet (Private-A) Route Table (Private) Association
  SubnetRouteTableAssociationPrivateA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivateA
      RouteTableId: !Ref RouteTablePrivate

  ## EC2(VPC): Subnet (Private-C)
  SubnetPrivateC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.7.0/24
      AvailabilityZone: !Sub ${AWS::Region}c
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-private-subnet-c

  ## EC2(VPC): Subnet (Private-C) Route Table (Private) Association
  SubnetRouteTableAssociationPrivateC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivateC
      RouteTableId: !Ref RouteTablePrivate

  ## EC2(VPC): VPC Endpoint (Gateway) (S3)
  VPCEndpointGatewayS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref RouteTableProtectedA
        - !Ref RouteTableProtectedC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      VpcId: !Ref VPC

Outputs:
  ## EC2(VPC): VPC
  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC

  ## EC2(VPC): Internet Gateway
  InternetGateway:
    Value: !Ref InternetGateway
    Export:
      Name: !Sub ${AWS::StackName}-InternetGateway

  ## EC2(VPC): Route Table (Public)
  RouteTablePublic:
    Value: !Ref RouteTablePublic
    Export:
      Name: !Sub ${AWS::StackName}-RouteTablePublic

  ## EC2(VPC): Subnet (Public-A)
  SubnetPublicA:
    Value: !Ref SubnetPublicA
    Export:
      Name: !Sub ${AWS::StackName}-SubnetPublicA

  ## EC2(VPC): Subnet (Public-C)
  SubnetPublicC:
    Value: !Ref SubnetPublicC
    Export:
      Name: !Sub ${AWS::StackName}-SubnetPublicC

  ## EC2(VPC): EIP
  EIPNATGatewayA:
    Value: !Ref EIPNATGatewayA
    Export:
      Name: !Sub ${AWS::StackName}-EIPNATGatewayA

  ## EC2(VPC): NAT Gateway @ Public-A
  NATGatewayA:
    Value: !Ref NATGatewayA
    Export:
      Name: !Sub ${AWS::StackName}-NATGatewayA

  ## EC2(VPC): Route Table (Protected-A)
  RouteTableProtectedA:
    Value: !Ref RouteTableProtectedA
    Export:
      Name: !Sub ${AWS::StackName}-RouteTableProtectedA

  ## EC2(VPC): Route Table (Protected-C)
  RouteTableProtectedC:
    Value: !Ref RouteTableProtectedC
    Export:
      Name: !Sub ${AWS::StackName}-RouteTableProtectedC

  ## EC2(VPC): Subnet (Protected-A)
  SubnetProtectedA:
    Value: !Ref SubnetProtectedA
    Export:
      Name: !Sub ${AWS::StackName}-SubnetProtectedA

  ## EC2(VPC): Subnet (Protected-C)
  SubnetProtectedC:
    Value: !Ref SubnetProtectedC
    Export:
      Name: !Sub ${AWS::StackName}-SubnetProtectedC

  ## EC2(VPC): Route Table (Private)
  RouteTablePrivate:
    Value: !Ref RouteTablePrivate
    Export:
      Name: !Sub ${AWS::StackName}-RouteTablePrivate

  ## EC2(VPC): Subnet (Private-A)
  SubnetPrivateA:
    Value: !Ref SubnetPrivateA
    Export:
      Name: !Sub ${AWS::StackName}-SubnetPrivateA

  ## EC2(VPC): Subnet (Private-C)
  SubnetPrivateC:
    Value: !Ref SubnetPrivateC
    Export:
      Name: !Sub ${AWS::StackName}-SubnetPrivateC

  ## EC2(VPC): VPC Endpoint (Gateway) (S3)
  VPCEndpointGatewayS3:
    Value: !Ref VPCEndpointGatewayS3
    Export:
      Name: !Sub ${AWS::StackName}-VPCEndpointGatewayS3